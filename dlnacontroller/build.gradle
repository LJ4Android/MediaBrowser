if(isModule.toBoolean()){
    apply plugin: 'com.android.library'
}else {
    apply plugin: 'com.android.application'
}

android {
    compileSdkVersion COMPILE_SDK_VERSION as int
    buildToolsVersion BUILD_TOOLS_VERSION as String

    defaultConfig {
        minSdkVersion MIN_SDK_VERSION as int
        targetSdkVersion TARGET_SDK_VERSION as int
        versionCode VERSION_CODE as int
        versionName VERSION_NAME as String

        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions -std=c++11"
                arguments '-DANDROID_TOOLCHAIN=clang',
                        '-DANDROID_PLATFORM=android-21',
                        '-DANDROID_STL=gnustl_static'
            }
        }
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets{
        main{
            jniLibs.srcDirs = ['jniLibs']
            if (isModule.toBoolean()) {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //集成开发模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }
            } else {
                manifest.srcFile 'src/main/application/AndroidManifest.xml'
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
        }
    }
}

dependencies {
    api project(':common')
    testApi "junit:junit:${JUNIT_VERSION}"
    androidTestApi "com.android.support.test:runner:${RUNNER_VERSION}"
    androidTestApi "com.android.support.test.espresso:espresso-core:${ESPRESSO_VERSION}"
}
